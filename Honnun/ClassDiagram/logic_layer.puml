@startuml !local
class PlayerLL #EB937F{
    DataWrapper
    players[]: PlayerMdl

    -update_players()
    -write_players()

    get_player(player_id)
    get_all_players()
    get_players_by_club("club_id")
    ssn_exists(ssn)

    create_player(PlayerMdl)
}

class MatchLL #EB937F{
    DataWrapper
    matches[]: MatchMdl

    -count_qps(qp_str)
    -get_highest_shots(qp_str)
    -update_matches()
    -write_matches()
    -find_match(match_id)
    -date_obj_to_str(date_obj)
    -date_str_to_onbj(date_str)
    -get_last_n_matches(qp_ls, last_n_matches)
    
    get_all_player_qp_strings(player_id)
    get_player_total_qps_by_division(player_id, division_id)
    get_player_highest_shots_by_division(player_id, division_id)
    get_all_matches()
    get_match(match_id)
    get_matches_by_division(division_id)
    get_upcoming_mathes()
    get_concluded_matches()
    get_date(match_id)
    get_start_and_end_date(match_id)
    get_teams(match_id[])

    generate_matches(team_id[], division_id, start_date, rest_days, rounds)
    create_match(MatchMld)
    set_date(match_id, new_date)
    set_results(match_id, results, qps, home_players, away_players)
}

class DivisionLL #EB937F {
    DataWrapper
    divisions[]: DivisionMld
    
    -update_divisions()
    -write_divisions()
    -find_division(division_id)

    get_division(division_id)
    get_all_divisions()
    get_match_ids(division_id)
    get_team_ids(division_id)
    name_exists(division_name)

    create_division(DivisionMld)
    add_team(team_id, division_id)
    add_matches(match_ids[], division_id)
    set_dates(start_date, end_date, division_id)
}

class TeamLL #EB937F{
    DataWrapper
    teams[]: TeamMdl

    -update_teams()
    -write_teams()
    -find_team(team_id)

    get_all_teams()
    get_team(team_id)
    get_captain(team_id)
    get_players(team_id)
    get_teams_by_club(club_id)
    team_name_exists(name, team_id)

    create_team(TeamMdl)
    add_player(player_id, team_id)
    promote_to_captain(player_id, team_id)
}

class ClubLL #EB937F {
    DataWrapper
    clubs[]: ClubMdl

    -update_clubs()
    -write_clubs()
    -find_club(club_id)

    get_club(club_id)
    get_all_clubs()
    name_exists(name)
    get_teams(club_id)

    create_club()
    add_team(team_id, club_id)
}
class MasterLL #EB937F {
    DataWrapper
    MatchLL
    DivisionLL
    TeamLL
    PlayerLL
    ClubLL

    -get_players_by_division(division_id)
    -count_player_wins_in_match(player_id, MatchMdl)
    -count_legs(home: bool, results)
    -calculate_record(TeamMdl, matches[]: MatchMdl)
    -sort_leaderboard(leaderboard)

    update_division_start_and_end_date(division_id)
    generate_division_matches(division_id, start_date, rest_days, rounds)
    postpone_match(new_date, division_id, match_id)
    get_player_leaderboard_by_division(division_id, category)
    get_player_statistics_by_division(player_id, division_id, last_n_matches)
    get_leaderboard(DivisionMld)
    get_team_names_by_division(division_id)
    team_name_exists_on_club(name, club_id)
    get_division_unplayed_match_ids(division_id)
}
class LogicWrapper{
    DataWrapper
    PlayerLL
    TeamLL
    ClubLL
    DivisionLL
    MatchLL
    MasterLL
    allexposedLLfunctions()
}

LogicWrapper *-- TeamLL
LogicWrapper *-- PlayerLL
LogicWrapper *-- ClubLL
LogicWrapper *-- DivisionLL
LogicWrapper *-- MatchLL
LogicWrapper *-- MasterLL

@enduml